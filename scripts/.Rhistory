#crtbal.emplstat <- aggregate(x = (dframe$AR26_PrimaryIncome_MNY *  dframe$AR67_CurrentBalance_MNY)/sumAR67, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum)
#str(crtbal.emplstat)
endTime1 <- Sys.time()
timeRun <- difftime(endTime1,startTime1,units="secs")
timeRun
timeRunNoFetch <- difftime(endTime1,startTime2,units="secs")
timeRunNoFetch
x <- as.factor(res$Group.1)
y <- res$x
plot(x,y)
#install.packages("ggplot2")
library(ggplot2)
ggplot(data=data.frame(as.factor(res$Group.1)),aes(x=res$x)) + geom_bar()
#boxplot(as.factor(res$Group.1), res$x)
#histogram(as.factor(res$Group.1), res$x)
#https://docs.microsoft.com/en-us/sql/advanced-analytics/r-services/sql-server-r-services-tutorials
ggplot(data=data.frame(y),aes(x=x)) + geom_bar()
ggplot(data=data.frame(y),aes(x=x)) + geom_bar()
library(ggplot2)
ggplot(data=data.frame(y),aes(x=x)) + geom_bar()
ggplot(data=data.frame(y),aes(y=x)) + geom_bar()
ggplot(data=data.frame(y),aes(x=y, y=x)) + geom_bar()
ggplot(data=data.frame(y),aes(x='y', y=x)) + geom_bar()
ggplot(data=data.frame(x),aes(x='y', y=y)) + geom_bar()
ggplot(data=data.frame(x),aes(x='employment status', y='WA AR26')) + geom_bar()
x <- as.factor(res$Group.1)
y <- res$x
plot(x,y)
library(ggplot2)
ggplot(data=data.frame(x),aes(x='employment status', y='WA AR26')) + geom_bar()
ggplot(data=data.frame(x), y = y,aes(x='employment status', y='WA AR26')) + geom_bar()
ggplot(data=data.frame(x), y = y,aes(x='employment status', y='WA AR26')) + geom_bar() + stat_bin()
ggplot(data=data.frame(x), y = y,aes(x='employment status', y='WA AR26')) + geom_bar() + stat_ide
ggplot(data=data.frame(x), y = y,aes(x='employment status', y='WA AR26')) + geom_bar() + stat_identity()
ggplot(data=data.frame(x), aes(x='employment status', y='WA AR26')) + geom_bar() + stat_identity()
ggplot(data=data.frame(x), aes(x=x, y='WA AR26')) + geom_bar() + stat_identity()
ggplot(data=data.frame(x), aes(x=x, y=y)) + geom_bar() + stat_identity()
ggplot(data=data.frame(x), aes(x=x, y=y)) + geom_bar() + stat_identity() + geom_contour()
ggplot(data=data.frame(x), aes(x=x, y=y)) + geom_bar() + stat_identity() + geom_area()
ggplot(data=data.frame(x), aes(x=x, y=y)) + stat_identity() + geom_area()
ggplot(data=data.frame(x), aes(x=x, y=y)) + stat_identity() + geom_bar()
library("RSQLServer", lib.loc="~/R/win-library/3.2")
startTime1 <- Sys.time()
sqlconn <- dbConnect(SQLServer(), 'sqldev01_debug:1433/ttool_ecb_latest;trusted_connection=yes;')
# dbGetInfo(sqlconn)
result <- dbSendQuery(conn = sqlconn, statement = 'SELECT [AR21_EmploymentStatus_LST],[AR26_PrimaryIncome_MNY],[AR67_CurrentBalance_MNY] FROM [ttool].[RMBS_ASSETS]')
dframe <- fetch(result, -1)
dbDisconnect(sqlconn)
startTime2 <- Sys.time()
#sumAR67 <- sum(dframe$AR67_CurrentBalance_MNY, na.rm=TRUE)
aggAR26 <- aggregate(x = dframe$AR26_PrimaryIncome_MNY, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum, na.rm=TRUE)
aggAR67x26 <- aggregate(x = dframe$AR67_CurrentBalance_MNY * dframe$AR26_PrimaryIncome_MNY, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum, na.rm=TRUE)
res <- data.frame(aggAR67x26[1], aggAR67x26[2]/aggAR26[2])
res
#crtbal.emplstat <- aggregate(x = (dframe$AR26_PrimaryIncome_MNY *  dframe$AR67_CurrentBalance_MNY)/sumAR67, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum)
#str(crtbal.emplstat)
endTime1 <- Sys.time()
timeRun <- difftime(endTime1,startTime1,units="secs")
timeRun
timeRunNoFetch <- difftime(endTime1,startTime2,units="secs")
timeRunNoFetch
x <- as.factor(res$Group.1)
y <- res$x
plot(x,y)
#install.packages("ggplot2")
library(ggplot2)
ggplot(data=data.frame(x), aes(x=x, y=y)) + stat_identity() + geom_bar()
#https://docs.microsoft.com/en-us/sql/advanced-analytics/r-services/sql-server-r-services-tutorials
library("RSQLServer", lib.loc="~/R/win-library/3.2")
startTime1 <- Sys.time()
sqlconn <- dbConnect(SQLServer(), 'sqldev01_debug:1433/ttool_ecb_latest;trusted_connection=yes;')
# dbGetInfo(sqlconn)
result <- dbSendQuery(conn = sqlconn, statement = 'SELECT [AR21_EmploymentStatus_LST],[AR26_PrimaryIncome_MNY],[AR67_CurrentBalance_MNY] FROM [ttool].[RMBS_ASSETS]')
dframe <- fetch(result, -1)
dbDisconnect(sqlconn)
startTime2 <- Sys.time()
#sumAR67 <- sum(dframe$AR67_CurrentBalance_MNY, na.rm=TRUE)
aggAR26 <- aggregate(x = dframe$AR26_PrimaryIncome_MNY, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum, na.rm=TRUE)
aggAR67x26 <- aggregate(x = dframe$AR67_CurrentBalance_MNY * dframe$AR26_PrimaryIncome_MNY, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum, na.rm=TRUE)
res <- data.frame(aggAR67x26[1], aggAR67x26[2]/aggAR26[2])
res
#crtbal.emplstat <- aggregate(x = (dframe$AR26_PrimaryIncome_MNY *  dframe$AR67_CurrentBalance_MNY)/sumAR67, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum)
#str(crtbal.emplstat)
endTime1 <- Sys.time()
timeRun <- difftime(endTime1,startTime1,units="secs")
timeRun
timeRunNoFetch <- difftime(endTime1,startTime2,units="secs")
timeRunNoFetch
x <- as.factor(res$Group.1)
y <- res$x
plot(x,y)
#install.packages("ggplot2")
library(ggplot2)
ggplot(data=data.frame(x), aes(x=x, y=y)) + stat_identity() + geom_bar()
#https://docs.microsoft.com/en-us/sql/advanced-analytics/r-services/sql-server-r-services-tutorials
library("RSQLServer", lib.loc="~/R/win-library/3.2")
startTime1 <- Sys.time()
sqlconn <- dbConnect(SQLServer(), 'sqldev01_debug:1433/ttool_ecb_latest;user=sql_user;password=A9NBRsNel2')
# dbGetInfo(sqlconn)
result <- dbSendQuery(conn = sqlconn, statement = 'SELECT [AR21_EmploymentStatus_LST],[AR26_PrimaryIncome_MNY],[AR67_CurrentBalance_MNY] FROM [ttool].[RMBS_ASSETS]')
dframe <- fetch(result, -1)
dbDisconnect(sqlconn)
startTime2 <- Sys.time()
#sumAR67 <- sum(dframe$AR67_CurrentBalance_MNY, na.rm=TRUE)
aggAR26 <- aggregate(x = dframe$AR26_PrimaryIncome_MNY, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum, na.rm=TRUE)
aggAR67x26 <- aggregate(x = dframe$AR67_CurrentBalance_MNY * dframe$AR26_PrimaryIncome_MNY, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum, na.rm=TRUE)
res <- data.frame(aggAR67x26[1], aggAR67x26[2]/aggAR26[2])
res
#crtbal.emplstat <- aggregate(x = (dframe$AR26_PrimaryIncome_MNY *  dframe$AR67_CurrentBalance_MNY)/sumAR67, by = list(dframe$AR21_EmploymentStatus_LST), FUN = sum)
#str(crtbal.emplstat)
endTime1 <- Sys.time()
timeRun <- difftime(endTime1,startTime1,units="secs")
timeRun
timeRunNoFetch <- difftime(endTime1,startTime2,units="secs")
timeRunNoFetch
x <- as.factor(res$Group.1)
y <- res$x
plot(x,y)
#install.packages("ggplot2")
library(ggplot2)
ggplot(data=data.frame(x), aes(x=x, y=y)) + stat_identity() + geom_bar()
#https://docs.microsoft.com/en-us/sql/advanced-analytics/r-services/sql-server-r-services-tutorials
#assignment
pies.count <- 300 #Using assignment operator
pies.count #print variable content
assign("pies.count",300) #Using assign function
pies.count #print variable content
pies.count <- 300 #Using assignment operator
pies.count #print variable content
assign("pies.count",400) #Using assign function
pies.count #print variable content
350 -> pies.count
pies.count
#Global environment
match.score <- 300 #assign variable in global environment
match.score  #get variable from global environment
get("match.score",globalenv())  #get variable from global environment
#Create Custom environment
my.environment <- new.env() #create a new custom environment
parent.env(my.environment) #Check parent environment
#Assign a variable in custom environment
assign("match.score",320,my.environment) #assign a variable in custom environment
my.environment[["match.score"]] <- 320 #assign a variable in custom environment
my.environment$match.score <- 320 #assign a variable in custom environment
#Get variable from custom environment
get("match.score",my.environment)
my.environment[["match.score"]] #get variable of custom environment
my.environment$match.score #get variable of custom environment
match.score
get("match.score",my.environment)
10 + 5
10 ^ 5
10 / 5
format(10 ^ 5, scientific=FALSE) #Without scientific notation
10 ** 5
10 ^ 5
10 %% 3
10 %/% 3
factorial(5)
pi #PI
options() #Get global options
options(digits=10) #Set digits to 10
pi #PI
pi #PI
options() #Get global options
options(digits=10) #Set digits to 10
options(digits=22) #Set digits to 10
pi #PI
options(digits=32) #Set digits to 10
options(digits=22) #Set digits to 10
pi #PI
1 / 0 #Positive infinity
-1 / 0 #Negative infinity
Inf + 5 #Operation on Inf
is.finite(1 / 0) #Check if finite
is.infinite(1 / 0) #Check if infinite
Inf / Inf #NaN (Not a Number)
is.nan(Inf/Inf) #Check if NaN
NA + 5 #Operation on NA
is.na(NA) #Check if NA
sum(NA, 5, na.rm = TRUE)
NA + 5 #Operation on NA
sum(NA, 5, na.rm = TRUE)
is.na(NA) #Check if NA
is.na(NaN) #Check if NaN is NA
is.nan(NA) #Check if NA is NaN
flowers.count <- c(10, 20, 30,  40) #using combine function
flowers.count #print variable content
str(flowers.count)
mean(flowers.count)
flowers.count <- flowers.count + 5 #arithmetic operator
flowers.count
flowers.count >= 30 #logical operator
flowers.roses.count <- c(20,40,30,50)
flowers.tulips.count <- c(30,20,50,20)
flowers.total.count <- flowers.roses.count + flowers.tulips.count #Addition
flowers.total.count
flowers.total.count <- flowers.total.count + flowers.sn.count #Addition
flowers.snowdrops.count <- c(1,2,3)
flowers.total.count <- flowers.total.count + flowers.snowdrops.count #Addition
flowers.snowdrops.count <- c(1,2)
flowers.total.count <- flowers.total.count + flowers.snowdrops.count #Addition
flowers.total.count
flowers.total.count <- flowers.roses.count + flowers.tulips.count #Addition
flowers.total.count
flowers.snowdrops.count <- c(1,2)
flowers.total.count <- flowers.total.count + flowers.snowdrops.count #Addition
flowers.total.count
flower.species <- c("Rose","Tulip","Petunia","Iris") # Character vector
flower.species
flower.species <- c(2L,2L,1L,1L) # Integer vector
flower.species
flower.species <- c("Rose","Tulip","Petunia","Iris") # Character vector
flower.species
flower.species <- c(2L,2L,1L,1L) # Integer vector
flower.species
flower.species <- factor(c("Rose","Tulip","Petunia","Iris")) # factor
flower.species
as.numeric(flower.species) #Explicit conversion
flower.species
flower.blood.groups
flower.blood.groups <- factor(c("A","AB","O","AB"), levels = c("A","B","AB","O"))
str(flower.blood.groups)
flower.species <- factor(c("Rose","Tulip","Petunia","Iris")) # factor
flower.species
str(flower.blood.groups)
flower.species <- c("Rose","Tulip","Petunia","Iris") # Character vector
flower.species
flower.species <- factor(c("Rose","Tulip","Petunia","Iris")) # factor
flower.species
str(flower.blood.groups)
str(flower.species)
flower.species <- c("Rose","Tulip","Petunia","Iris") # Character vector
flower.species
flower.species <- factor(c("Rose","Tulip","Petunia","Iris")) # factor
flower.species
str(flower.species)
pet.names <- c("Rex","Kitscha","Tommy","Jumbo")
pet.species <- factor(c("Dog", "Cat", "Parrot", "Elephant"))
pet.nolegs <- factor(c("quadruped","quadruped","biped","quadruped"))
pet.nolegs
str(pet.nolegs)
myPets <- list(pet.names, pet.species, pet.nolegs)
str(student1)
str(myPets)
myPets
myPets[3,1]
myPets[1,1]
myPets[1,1,1]
myPets[1]
myPets[1:1]
myPets[1:2]
myPets[1:3]
myPets
myPets[1:2]
myPets <- list(pet.names[1], pet.species[1], pet.nolegs[1])
str(myPets)
myPets
myPets[1:2]
myPets1 <- list(pet.names[1], pet.species[1], pet.nolegs[1])
str(myPets1)
myPets1
myPets1[2]
myPets[2]
myPets[[2]
#Creating unnamed list
myPets1 <- list(pet.names[1], pet.species[1], pet.nolegs[1])
str(myPets1)
myPets1
myPets1[2]
#Creating named list
myNamedPets <- list(names = pet.names,
species = pet.species,
legs = pet.nolegs)
myNamedPets
str(myNamedPets)
student1 <- list(name = student.names[1],
weight = student.weights[1],
gender = student.genders[1],
marks = c(student.physics.marks[1], student.chemistry.marks[1]))
str(student1)
myPets[[2]]
myPets[2]
myPets[[2]]
myPets <- list(pet.names, pet.species, pet.nolegs)
str(myPets)
myPets
myPets[2]
myPets[2][1]
myPets[2][2]
myNamedPets <- list(names = pet.names,
species = pet.species,
legs = pet.nolegs)
myNamedPets
str(myNamedPets)
myNamedPets <- list(names = pet.names,
species = pet.species,
legs = pet.nolegs)
myNamedPets
str(myNamedPets)
myNamedPets$species[2]
myNamedPets <- list(names = pet.names,
properties = c(species = pet.species, legs = pet.nolegs))
myNamedPets
str(myNamedPets)
myNamedPets <- list(names = pet.names,
properties = c(pet.species, pet.nolegs))
myNamedPets
str(myNamedPets)
myNamedPets[2]
myNamedPets[2][1]
myNamedPets[2,1]
myNamedPets["names", "species"]
myNamedPets[c("names", "species")]
myNamedPets <- list(names = pet.names,
species = pet.species,
legs = pet.nolegs)
myNamedPets
str(myNamedPets)
myNamedPets$species[2]
myNamedPets[c("names", "species")]
myPets <- data.frame(pet.names, pet.species, pet.nolegs)
pet.names <- c("Rex","Kitscha","Tommy","Jumbo")
pet.species <- factor(c("Dog", "Cat", "Parrot", "Elephant"))
pet.nolegs <- factor(c("quadruped","quadruped","biped","quadruped"))
str(pet.nolegs)
myPets <- data.frame(pet.names, pet.species, pet.nolegs)
myPets
typeof(myPets)
myPets
str(myPets)
typeof(myPets)
myPets <- list(pet.names, pet.species, pet.nolegs)
str(myPets)
typeof(myPets)
myPets
myPetsNF <- data.frame(pet.names, pet.species, pet.nolegs, stringsAsFactors = FALSE)
myPetsNF
myPets
str(myPets)
str(myPetsNF)
pet.names <- c("Rex","Kitscha","Tommy","Jumbo")
pet.species <- factor(c("Dog", "Cat", "Parrot", "Elephant"))
pet.nolegs <- factor(c("quadruped","quadruped","biped","quadruped"))
myPets <- data.frame(pet.names, pet.species, pet.nolegs)
typeof(myPets)
myPets
str(myPets)
myPetsNF <- data.frame(pet.names, pet.species, pet.nolegs, stringsAsFactors = FALSE)
myPetsNF
myPets
str(myPetsNF)
str(myPets)
myPetsNF <- data.frame(pet.names, pet.species, pet.nolegs, stringsAsFactors = TRUE)
myPetsNF
str(myPetsNF)
str(myPets)
pet.names <- c("Rex","Kitscha","Tommy","Jumbo")
pet.species <- c("Dog", "Cat", "Parrot", "Elephant")
pet.nolegs <- factor(c("quadruped","quadruped","biped","quadruped"))
myPets <- data.frame(pet.names, pet.species, pet.nolegs)
typeof(myPets)
myPets
str(myPets)
myPetsNF <- data.frame(pet.names, pet.species, pet.nolegs, stringsAsFactors = FALSE)
myPetsNF
myPetsNF
str(myPetsNF)
str(myPets)
typeof(myPets)
typeof(myPetsNF)
oil.temp <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=2,nrow=4)
oil.temp
oil.temp <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=4,nrow=2
,byrow=TRUE)
oil.temp
oil.temp <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=2,nrow=4)
oil.temp
oil.temp <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=2,nrow=4
,byrow=TRUE)
oil.temp
oil.temp <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L, 55L),ncol=2,nrow=4
,byrow=TRUE)
oil.temp <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=2,nrow=4
,byrow=TRUE)
oil.temp
oil.temp[1,1]
oil.temp[1:3,1]
oil.temp
oil.temp[1:3,]
oil.temp[,1]
oil.temp
oil.temp[1,]
oil.temp[1:3,1] #
oil.temp
oil.temp[1:3,]
oil.temp[,1] # first 3 rows
oil.temp[1,] # first row
class1.student.physics.marks <- c( 70L , 75L , 80L,  85L)
class1.student.chemistry.marks <- c(60L, 70L, 85L, 70L)
class1.student.marks <-cbind(class1.student.physics.marks
, class1.student.chemistry.marks)
class1.student.marks
class2.student.physics.marks <- c( 71L , 76L , 81L,  86L)
class2.student.chemistry.marks <- c(61L, 71L, 86L, 71L)
class2.student.marks <-cbind(class2.student.physics.marks
, class2.student.chemistry.marks)
class2.student.marks
student.marks <- array(c(class1.student.marks,class2.student.marks), dim=c(4,2,2))
student.marks
student.marks[2,2,2] #Row number, column number, sheet number
student.marks[1:3,2,]
?cbind
class1.student.marks
c(class1.student.marks,class2.student.marks)
student.marks <- array(c(class1.student.marks,class2.student.marks), dim=c(4,2,2))
student.marks
oil.temp <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=2,nrow=4)
oil.temp
oil.temp2 <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=2,nrow=4
,byrow=TRUE)
oil.temp2
oilTempPerSessionPerRace <- array(c(oilTempRace1,oilTempRace1), dim=c(4,2,2))
oilTempPerSessionPerRace
oilTempRace1 <- c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L)
oilTempRace2 <- c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L)
oilTempPerSessionPerRace <- array(c(oilTempRace1,oilTempRace2), dim=c(4,2,2))
oilTempPerSessionPerRace
oilTempPerSessionPerRace[2,2,2] #Row number, column number, sheet number
oilTempRace1 <- c( 70L , 71L , 72L,  73L, 80L, 81L, 82L, 83L) #Race 1 Session 1(4) Session2(4)
oilTempRace2 <- c( 90L , 91L , 92L,  93L, 60L, 61L, 62L, 63L) #Race 2 Session 1(4) Session2(4)
oilTempPerSessionPerRace <- array(c(oilTempRace1,oilTempRace2), dim=c(4,2,2))
oilTempPerSessionPerRace #RaceNo, Session_Col, Measurement
oilTempPerSessionPerRace[2,2,2] #Row number, column number, sheet number
oilTempPerSessionPerRace[1:3,2,]
oilTempPerSessionPerRace
oilTempPerSessionPerRace[1:3,2,]
oilTempPerSessionPerRace[1:2,2,]
oilTempPerSessionPerRace[1:2,2,2]
oilTempPerSessionPerRace[1:2,2,1:3]
oilTempPerSessionPerRace[1:2,2,1:2]
oilTempPerSessionPerRace[1:2,1,1:2]
cbind(oilTempRace1, oilTempRace2)
cbind(oilTempRace1, oilTempRace2, deparse.level = 1)
cbind(oilTempRace1, oilTempRace2, deparse.level = 2)
typeof(cbind(oilTempRace1, oilTempRace2)
x <- cbind(oilTempRace1, oilTempRace2)
x
cbind(oilTempRace1, oilTempRace2)
x <- cbind(oilTempRace1, oilTempRace2)
x
typeof(x)
str(x)
WriteOnNoteBook <- function()
{
count <- 0
repeat {
count <- count + 1
print(paste("writing on page number",count))
}
}
WriteOnNoteBook()
search()
library("parallel")
library(parallel) #without quotes
search()
detach(package:parallel, unload=TRUE)
search()
detach(package:parallel)
library(parallel) #without quotes
detach(package:parallel)
library(newpackage)
if(!require("newpacakge"))
{
#Download and install package
}
setRepositories()
library(datasets)
data(iris)
str(iris)
head(iris)
View(iris)
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
range(iris$Sepal.Length)
diff(range(iris$Sepal.Length))
summary(iris$Sepal.Length)
summary(iris)
boxplot(iris$Sepal.Length)
boxplot(iris$Sepal.Length, horizontal = TRUE)
boxplot.stats(iris$Sepal.Length)
boxplot(iris[1:4])
hist(iris$Sepal.Length)
hist(iris$Sepal.Length,
main="Histogram of sepal length",
xlab="Sepal length")
var(iris$Sepal.Length)
sd(iris$Sepal.Length)
table(iris$Species)
barplot(table(iris$Species))
prop.table(table(iris$Species))
prop.table(table(iris$Species))*100
install.packages("psych")
library(psych)
describeBy(iris,group = iris$Species)
library(lattice)
histogram(~Sepal.Length|Species,
data=iris,
layout=c(1,3),
col="black")
boxplot(Sepal.Length~Species,
data = iris)
